{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SignalFlow Vault Welcome to the SignalflowEEG documentation. This guide will help you understand how to set up and use the SignalflowEEG application, which includes both a frontend (JavaScript) and a backend (Python/FastAPI). Table of Contents Introduction Installation Configuration Running the Application API Reference Frontend Guide Backend Guide EEG Data Processing Troubleshooting FAQ Contributing License Introduction SignalflowEEG is an application designed for processing EEG data. It features a robust backend built with Python and FastAPI, and a dynamic frontend developed using JavaScript. Prerequisites Python 3.8+ Node.js 18+ Docker (optional, for containerized deployment) Installation Downloading the Repository To get started with editing the files, you need to clone the repository to your local machine. Follow these steps: Clone the Repository : Open your terminal and run the following command to clone the repository: bash git clone https://github.com/cincibrainlab/SignalflowEEG.git Navigate to the Project Directory : Change into the project directory: bash cd SignalflowEEG Build and Execute Docker Images In order to run the vault you will need 3 docker containers running, all of which are defined in the docker-compose.yaml In order to create these containers you can run: bash docker compose up -d sf_uploader sf_db sf_portal It may take some time for the images to build but once they are running you will have a completely containerized application! Other backend components Docker Configuration for sf_uploader The sf_uploader service is defined in the docker-compose.yaml file. This service uses the tusproject/tusd:v1.9 image to handle file uploads. Below are the key configurations for this service: Container Name : sf_uploader Image : tusproject/tusd:v1.9 Command : -verbose -upload-dir=/uploads Volumes : tusd:/data ./portal_files/uploads:/uploads ./portal_files/input:/input ./portal_files/info_archive:/info_archive ./portal_files/output:/output Ports : 3001:1080 Restart Policy : always Networks : eeg-network This configuration ensures that the sf_uploader service is always running and accessible on port 3001 . The volumes map local directories to the container's directories, facilitating data persistence and access across different services. Database Configuration for sf_db The sf_db service is defined in the docker-compose.yaml file. This service uses the postgres:13 image to handle database operations. Below are the key configurations for this service: Container Name : sf_db Image : postgres:13 Ports : 3002:5432 Environment Variables : POSTGRES_USER : sfportal POSTGRES_PASSWORD : sfportal POSTGRES_DB : sfportal Volumes : sfdb-db-volume:/var/lib/postgresql/data Restart Policy : always Networks : eeg-network This configuration ensures that the sf_db service is always running and accessible on port 3002 . The environment variables set up the database user, password, and database name. The volume maps a local directory to the container's directory, ensuring data persistence. Installation Downloading the Repository To get started with editing the files, you need to clone the repository to your local machine. Follow these steps: Clone the Repository : Open your terminal and run the following command to clone the repository: bash git clone https://github.com/cincibrainlab/SignalflowEEG.git Navigate to the Project Directory : Change into the project directory: bash cd SignalflowEEG And thats it! Build and Execute Docker Images In order to run the vault you will need 3 docker containers running, all of which are defined in the docker-compose.yaml In order to create these containers you can run: bash docker compose up -d sf_uploader sf_db sf_portal It may take some time for the images to build but once they are running you will have a completely containerized application! ``` Start Application Start Docker Containers : docker compose up sf_db sf_uploader -d Backend : bash cd backend ./start_fastapi.sh Frontend : bash cd ../frontend ./start_frontend.sh Using Docker for Production Deployment For a production deployment, you can use Docker to containerize the application. Follow these steps: Build the Docker Images : Navigate to the root directory of the project and run the following command to build the Docker image: bash docker compose up -d sf_uploader sf_db sf_portal Access the Application : Open your web browser and go to http://localhost:5173 to access the SignalflowEEG application. Stopping the Container : To stop the running container, first find the container ID using: bash docker ps Then stop the container using: bash docker stop <container_id> By following these instructions, you can easily set up your development environment and deploy the SignalflowEEG application using Docker for production. Backend Installation","title":"SignalFlow Vault"},{"location":"#signalflow-vault","text":"Welcome to the SignalflowEEG documentation. This guide will help you understand how to set up and use the SignalflowEEG application, which includes both a frontend (JavaScript) and a backend (Python/FastAPI).","title":"SignalFlow Vault"},{"location":"#table-of-contents","text":"Introduction Installation Configuration Running the Application API Reference Frontend Guide Backend Guide EEG Data Processing Troubleshooting FAQ Contributing License","title":"Table of Contents"},{"location":"#introduction","text":"SignalflowEEG is an application designed for processing EEG data. It features a robust backend built with Python and FastAPI, and a dynamic frontend developed using JavaScript.","title":"Introduction"},{"location":"#prerequisites","text":"Python 3.8+ Node.js 18+ Docker (optional, for containerized deployment)","title":"Prerequisites"},{"location":"#installation","text":"","title":"Installation"},{"location":"#downloading-the-repository","text":"To get started with editing the files, you need to clone the repository to your local machine. Follow these steps: Clone the Repository : Open your terminal and run the following command to clone the repository: bash git clone https://github.com/cincibrainlab/SignalflowEEG.git Navigate to the Project Directory : Change into the project directory: bash cd SignalflowEEG Build and Execute Docker Images In order to run the vault you will need 3 docker containers running, all of which are defined in the docker-compose.yaml In order to create these containers you can run: bash docker compose up -d sf_uploader sf_db sf_portal It may take some time for the images to build but once they are running you will have a completely containerized application!","title":"Downloading the Repository"},{"location":"#other-backend-components","text":"","title":"Other backend components"},{"location":"#docker-configuration-for-sf_uploader","text":"The sf_uploader service is defined in the docker-compose.yaml file. This service uses the tusproject/tusd:v1.9 image to handle file uploads. Below are the key configurations for this service: Container Name : sf_uploader Image : tusproject/tusd:v1.9 Command : -verbose -upload-dir=/uploads Volumes : tusd:/data ./portal_files/uploads:/uploads ./portal_files/input:/input ./portal_files/info_archive:/info_archive ./portal_files/output:/output Ports : 3001:1080 Restart Policy : always Networks : eeg-network This configuration ensures that the sf_uploader service is always running and accessible on port 3001 . The volumes map local directories to the container's directories, facilitating data persistence and access across different services.","title":"Docker Configuration for sf_uploader"},{"location":"#database-configuration-for-sf_db","text":"The sf_db service is defined in the docker-compose.yaml file. This service uses the postgres:13 image to handle database operations. Below are the key configurations for this service: Container Name : sf_db Image : postgres:13 Ports : 3002:5432 Environment Variables : POSTGRES_USER : sfportal POSTGRES_PASSWORD : sfportal POSTGRES_DB : sfportal Volumes : sfdb-db-volume:/var/lib/postgresql/data Restart Policy : always Networks : eeg-network This configuration ensures that the sf_db service is always running and accessible on port 3002 . The environment variables set up the database user, password, and database name. The volume maps a local directory to the container's directory, ensuring data persistence.","title":"Database Configuration for sf_db"},{"location":"#installation_1","text":"","title":"Installation"},{"location":"#downloading-the-repository_1","text":"To get started with editing the files, you need to clone the repository to your local machine. Follow these steps: Clone the Repository : Open your terminal and run the following command to clone the repository: bash git clone https://github.com/cincibrainlab/SignalflowEEG.git Navigate to the Project Directory : Change into the project directory: bash cd SignalflowEEG And thats it! Build and Execute Docker Images In order to run the vault you will need 3 docker containers running, all of which are defined in the docker-compose.yaml In order to create these containers you can run: bash docker compose up -d sf_uploader sf_db sf_portal It may take some time for the images to build but once they are running you will have a completely containerized application! ``` Start Application Start Docker Containers : docker compose up sf_db sf_uploader -d Backend : bash cd backend ./start_fastapi.sh Frontend : bash cd ../frontend ./start_frontend.sh","title":"Downloading the Repository"},{"location":"#using-docker-for-production-deployment","text":"For a production deployment, you can use Docker to containerize the application. Follow these steps: Build the Docker Images : Navigate to the root directory of the project and run the following command to build the Docker image: bash docker compose up -d sf_uploader sf_db sf_portal Access the Application : Open your web browser and go to http://localhost:5173 to access the SignalflowEEG application. Stopping the Container : To stop the running container, first find the container ID using: bash docker ps Then stop the container using: bash docker stop <container_id> By following these instructions, you can easily set up your development environment and deploy the SignalflowEEG application using Docker for production.","title":"Using Docker for Production Deployment"},{"location":"#backend-installation","text":"","title":"Backend Installation"},{"location":"contributors/","text":"Contrib","title":"Contrib"},{"location":"contributors/#contrib","text":"","title":"Contrib"},{"location":"userguide/docker/","text":"Docker Docker Usage Docker can be managed using either the command line or the docker desktop application. Some useful commands are: 1. Check Docker Version To check the installed version of Docker, use: bash docker --version 2. List Running Containers To see all currently running containers: bash docker ps 3. List All Containers To list all containers, including stopped ones: bash docker ps -a 4. Stop a Running Container To stop a running container: bash docker stop <container_name_or_id> 5. Start a Container To start a stopped container: bash docker start <container_name_or_id> 6. View Container Logs To view the logs of a running container: bash docker logs <container_name_or_id> Configuration for sf_uploader The sf_uploader service is defined in the docker-compose.yaml file. This service uses the tusproject/tusd:v1.9 image to handle file uploads. Below are the key configurations for this service: Container Name : sf_uploader Image : tusproject/tusd:v1.9 Command : -verbose -upload-dir=/uploads Volumes : tusd:/data ./portal_files/uploads:/uploads ./portal_files/input:/input ./portal_files/info_archive:/info_archive ./portal_files/output:/output Ports : 3001:1080 Restart Policy : always Networks : eeg-network This configuration ensures that the sf_uploader service is always running and accessible on port 3001 . The volumes map local directories to the container's directories, facilitating data persistence and access across different services. Database Configuration for sf_db The sf_db service is defined in the docker-compose.yaml file. This service uses the postgres:13 image to handle database operations. Below are the key configurations for this service: Container Name : sf_db Image : mongo:latest Ports : 3002:27017 Volumes : sfdb-db-volume:/data/db Restart Policy : always Networks : eeg-network This configuration ensures that the sf_db service is always running and accessible on port 3002 . The volume maps a local directory to the container's directory, ensuring data persistence.","title":"Docker"},{"location":"userguide/docker/#docker","text":"","title":"Docker"},{"location":"userguide/docker/#docker-usage","text":"Docker can be managed using either the command line or the docker desktop application. Some useful commands are:","title":"Docker Usage"},{"location":"userguide/docker/#1-check-docker-version","text":"To check the installed version of Docker, use: bash docker --version","title":"1. Check Docker Version"},{"location":"userguide/docker/#2-list-running-containers","text":"To see all currently running containers: bash docker ps","title":"2. List Running Containers"},{"location":"userguide/docker/#3-list-all-containers","text":"To list all containers, including stopped ones: bash docker ps -a","title":"3. List All Containers"},{"location":"userguide/docker/#4-stop-a-running-container","text":"To stop a running container: bash docker stop <container_name_or_id>","title":"4. Stop a Running Container"},{"location":"userguide/docker/#5-start-a-container","text":"To start a stopped container: bash docker start <container_name_or_id>","title":"5. Start a Container"},{"location":"userguide/docker/#6-view-container-logs","text":"To view the logs of a running container: bash docker logs <container_name_or_id>","title":"6. View Container Logs"},{"location":"userguide/docker/#configuration-for-sf_uploader","text":"The sf_uploader service is defined in the docker-compose.yaml file. This service uses the tusproject/tusd:v1.9 image to handle file uploads. Below are the key configurations for this service: Container Name : sf_uploader Image : tusproject/tusd:v1.9 Command : -verbose -upload-dir=/uploads Volumes : tusd:/data ./portal_files/uploads:/uploads ./portal_files/input:/input ./portal_files/info_archive:/info_archive ./portal_files/output:/output Ports : 3001:1080 Restart Policy : always Networks : eeg-network This configuration ensures that the sf_uploader service is always running and accessible on port 3001 . The volumes map local directories to the container's directories, facilitating data persistence and access across different services.","title":"Configuration for sf_uploader"},{"location":"userguide/docker/#database-configuration-for-sf_db","text":"The sf_db service is defined in the docker-compose.yaml file. This service uses the postgres:13 image to handle database operations. Below are the key configurations for this service: Container Name : sf_db Image : mongo:latest Ports : 3002:27017 Volumes : sfdb-db-volume:/data/db Restart Policy : always Networks : eeg-network This configuration ensures that the sf_db service is always running and accessible on port 3002 . The volume maps a local directory to the container's directory, ensuring data persistence.","title":"Database Configuration for sf_db"},{"location":"userguide/frontend/","text":"Frontend Guide Home Page Upload Vault Analysis Manager","title":"Frontend"},{"location":"userguide/frontend/#frontend-guide","text":"","title":"Frontend Guide"},{"location":"userguide/frontend/#home-page","text":"","title":"Home Page"},{"location":"userguide/frontend/#upload","text":"","title":"Upload"},{"location":"userguide/frontend/#vault","text":"","title":"Vault"},{"location":"userguide/frontend/#analysis-manager","text":"","title":"Analysis Manager"},{"location":"userguide/installation/","text":"Installation Downloading the Repository To get started with editing the files, you need to clone the repository to your local machine. Follow these steps: Clone the Repository : Open your terminal and run the following command to clone the repository: bash git clone https://github.com/cincibrainlab/SignalflowEEG.git Navigate to the Project Directory : Change into the project directory: bash cd SignalflowEEG Build and Execute Docker Images In order to run the vault you will need 3 docker containers running, all of which are defined in the docker-compose.yaml In order to create these containers you can run: bash docker compose up -d sf_uploader sf_db sf_portal *Docker images may take some time to build Access the Application : Open your web browser and go to http://localhost:5173 to access the SignalflowEEG application.","title":"Installation"},{"location":"userguide/installation/#installation","text":"","title":"Installation"},{"location":"userguide/installation/#downloading-the-repository","text":"To get started with editing the files, you need to clone the repository to your local machine. Follow these steps: Clone the Repository : Open your terminal and run the following command to clone the repository: bash git clone https://github.com/cincibrainlab/SignalflowEEG.git Navigate to the Project Directory : Change into the project directory: bash cd SignalflowEEG Build and Execute Docker Images In order to run the vault you will need 3 docker containers running, all of which are defined in the docker-compose.yaml In order to create these containers you can run: bash docker compose up -d sf_uploader sf_db sf_portal *Docker images may take some time to build Access the Application : Open your web browser and go to http://localhost:5173 to access the SignalflowEEG application.","title":"Downloading the Repository"}]}